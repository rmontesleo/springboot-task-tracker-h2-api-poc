
name: PoC CI Demo

on:
  push:
    branches:
      - main

env:
  # Define common environment variables
  JAVA_VERSION: 21
  PROJECT_NAME: 'springboot-task-tracker-h2-api-poc'
  DOCKERFILE_PATH: 'Dockerfile'
  

jobs:
  # Job 1: Build jar, Docker Image and execute Unit Tests
  test_and_build:
    runs-on: ubuntu-latest
    outputs:
      jaf_file_name: ${{ steps.get-jar-name.outputs.jar_name }}
      docker_image_tag: ${{ steps.get-tag-name.outputs.docker_tag }}
      project_version: ${{ steps.get-version.outputs.project_version }}

    steps:
        - name: Checkout Code
          uses: actions/checkout@v4
        
        - name: Set up Java ${{ env.JAVA_VERSION }}
          uses: actions/setup-java@v4
          with:
              distribution: 'temurin'
              java-version: ${{ env.JAVA_VERSION }}
              cache: 'maven'

        - name: Get Maven Project Version
          id: get-version
          run: |
            PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "project_version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
            echo "Discovered project version: $PROJECT_VERSION"

        - name: Build Maven Project and Get JAR Name
          id: get-jar-name
          run: |
            #Build without test run in the next step
            mvn clean package -DskipTests 
            JAR_NAME=$(ls target/*.jar | head -n 1 | xargs -n 1 basename )
            echo "jar_name=$JAR_NAME" >> "$GITHUB_OUTPUT"
            echo "Discovered JAR name: $JAR_NAME"

        - name: Execute Unit Test
          env:
            MAVEN_OPTS: -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3
          run: mvn test  

        - name: Upload JAR Artifact
          uses: actions/upload-artifact@v4
          if: ${{ success()}}
          with:
            name: ${{ env.PROJECT_NAME }}-jar
            path: target/${{ steps.get-jar-name.outputs.jar_name }}
            retention-days: 7    

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build Docker Image
          id: build-image
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ${{ env.DOCKERFILE_PATH }}
            push: false # Only build locally
            load: true # Load the image into Docker
            tags: ${{ env.PROJECT_NAME }}:${{ github.sha }}
            target: production

        - name: Get docker tag name
          id: get-tag-name
          run: |
            TAG_NAME="${{ env.PROJECT_NAME }}:${{ github.sha }}"
            echo "docker_tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "TAG_NAME is $TAG_NAME"


        - name: List Docker Images
          run: docker images    
          

        - name: Export Docker Image to Tar (for subsequent jobs)
          run: docker save ${{ env.PROJECT_NAME }}:${{ github.sha}} -o ${{ env.PROJECT_NAME}}.tar

        - name: Upload Docker Image Tarball Artifact
          uses: actions/upload-artifact@v4
          if: ${{ success() }}
          with:
            name: ${{ env.PROJECT_NAME }}-docker-image
            path: ${{ env.PROJECT_NAME }}.tar
            retention-days: 7

  # Job 2: Run Security Scans ()
  # These are often part of a 'security' gate can run in parallel with quality/vulnerability scans.
  security-scans:
    runs-on: ubuntu-latest
    needs: test_and_build 
    continue-on-error: true

    steps:
      - name: Download Source Code
        uses: actions/checkout@v4

      - name: Download Jar Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME}}-jar
          path: ./dowloaded-artifacts/jar/
        
      - name: Download Docker Image Tarball
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-docker-image
          path: ./dowloaded-artifacts/docker-image/

      
      - name: Load Docker Image
        run: docker load -i ./dowloaded-artifacts/docker-image/${{env.PROJECT_NAME}}.tar

      - name: Verify components are placed
        run: |
          ls
          ls ./dowloaded-artifacts/docker-image/
          ls ./dowloaded-artifacts/jar/
          docker images
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io                   # (optional, docker.io is the default)
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}    

      - name: Docker Scout Scan (CVES)
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.PROJECT_NAME }}:${{ github.sha}}
          sarif-file: docker-cve-report.sarif
          summary: true
          github-token: ${{ secrets.POC_TOKEN }} # Verify if this token is required

      - name: Run Snyk to check vulnerabilities
        uses: snyk/actions/maven-3-jdk-21@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-action-report.sarif  

      # TODO: Fix what is missing to upload this repo
      # Resource not accessible by integration 
      #- name: Upload Snyk Result to GitHub Code Scanning
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    sarif_file: snyk.sarif

      - name: Upload Securitgy Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            snyk-action-report.sarif
            docker-cve-report.sarif
          retention-days: 5

  
  # Job 3: Aqua Trivy Scans (Filesystem & Image)
  vulnerability-scans:
    runs-on: ubuntu-latest
    needs: test_and_build

    steps:
      - name: Download Source Code
        uses: actions/checkout@v4

      - name: Download Docker Image Tarball for vulnerability scans
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-docker-image
          path: ./download-artifacts/docker-image/

      - name: Load Docker Image for vulnerability scans
        run: docker load -i ./download-artifacts/docker-image/${{env.PROJECT_NAME}}.tar

      - name: Aqua Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{needs.test_and_build.outputs.docker_image_tag}}'
          format: 'json'
          output: 'trivy_image_report.json'
          severity: 'HIGH,CRITICAL'

      - name: Aqua Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'json'
          output: 'trivy_fs_report.json'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy Repots
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy_fs_report.json
            trivy_image_report.json
          retention-days: 5


  
  # Job 4: SonarQube Scan (often an independent, possibly long-running quality gate)
  quality-scan:
    runs-on: ubuntu-latest
    needs: test_and_build

    steps:
      - name: Download Source Code
        uses: actions/checkout@v4

      - name: Verify Downloaded Code
        run: |
          echo "checking code"
          ls -la
          echo "verifying current directory"
          pwd
        
      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.POC_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          # Re-compile to ensure classes are present for Sonar ()
          echo "mvn clean install..."
          mvn clean install -DskipTests

          echo "SONAR HOST ${{env.SONAR_HOST_URL}}"
          echo "SONAR PROJECT ${{env.PROJECT_NAME}}"
          echo "Execute sonar"
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.organization=${{env.SONAR_ORGANIZATION}} \
            -Dsonar.projectKey=${{ env.PROJECT_NAME }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes  

        
